; *****************************************************************************
; * ZNC Playback for mIRC/AdiIRC                                   2020-10-31 *
; *                                                                           *
; * Author: tsukasa <tsukasa@tsukasa.eu>                                      *
; *                                                                           *
; * Implements rudimentary support for the third-party ZNC Playback module by *
; * jpnurmi (https://github.com/jpnurmi/znc-playback).                        *
; *                                                                           *
; * Make sure you read the wiki page https://wiki.znc.in/Playback for details *
; * on how to set up the Playback module properly.                            *
; *                                                                           *
; * The script manually requests the znc.in/playback cap and will use the     *
; * server-side msg timestamp of the last PRIVMSG to request possibly missing *
; * contents from ZNC for the network.                                        *
; *                                                                           *
; * This script has been tested on Freenode and synIRC. If it does not work   *
; * for you, perhaps the server/network is doing wonky stuff...               *
; *****************************************************************************

on *:start:{
  znc_load_playback_list
  znc_start_playback_timer
}

on *:exit:{
  znc_save_playback_list
}

on *:disconnect:{
  znc_save_playback_list
}

on *:logon:*:{
  ; Try to enable the znc.in/playback cap. The rest of the script will
  ; check for the cap to be activated, so this should play nicely on
  ; regular servers.
  znc_enable_playback
}

on *:connect:{
  if ($iif($ircv3caps(znc.in/playback).enabled, $true, $false)) {
    echo -gsut Playback of ZNC buffers supported through CAP.

    if ($hfind(znc_playback_table, $network, 0) == 0) {
      echo -gsut Adding network " $+ $network $+ " to ZNC playback list
      znc_update_playback_timestamp 0
    } else {
      znc_perform_playback
    }
  }
}

; --------------- Events that cause the timestamp to be updated ---------------

; PRIVMSG should obviously trigger the timestamp to get updated.
on *:text:*:*:{
  znc_update_playback_timestamp $msgstamp
}

; JOIN/PART are useful to keep track of "quiet" channels.
on *:part:*:{
  znc_update_playback_timestamp $msgstamp
}

on *:join:*:{
  znc_update_playback_timestamp $msgstamp
}

; --------------- Events that cause the timestamp to be removed ---------------

on me:*:part:*:{
  znc_clear_playback $1
}

; ---------------------------------- Aliases ----------------------------------

alias znc_start_playback_timer {
  timerZncPlaybackAutosave -o 0 300 znc_save_playback_list
}

alias znc_load_playback_list {
  hload -im100 znc_playback_table zncplayback.ini ZncPlayback
}

alias znc_save_playback_list {
  hsave -i znc_playback_table zncplayback.ini ZncPlayback
}

alias znc_enable_playback {
  .raw CAP REQ :znc.in/playback
}

alias znc_perform_playback {
  if ($iif($ircv3caps(znc.in/playback).enabled, $true, $false)) {
    if ($hfind(znc_playback_table, $network, 0) > 0) {
      ; Since we save the timestamp of the last event/message, we are only
      ; interested in stuff that is slightly newer...
      set -l %from_tstamp $calc($hget(znc_playback_table, $network) + 0.01)
      echo -gsut Performing ZNC playback for %from_tstamp to $ctime $+ ...
      znc *playback play * %from_tstamp
    } else {
      echo -gsut No ZNC playback for network $network $+ .
    }
  }
}

alias znc_clear_playback {
  if ($iif($ircv3caps(znc.in/playback).enabled, $true, $false)) {
    znc *playback clear $1
  }
}

alias znc_update_playback_timestamp {
  if ($iif($ircv3caps(znc.in/playback).enabled, $true, $false)) {
    hadd znc_playback_table $network $1
  }
}
